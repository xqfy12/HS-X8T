<?xml version="1.0" encoding="UTF-8" ?>
<exp:Configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exp="http://com.marvell.cpa"
	xsi:schemaLocation="http://com.marvell.cpa target.xsd">
	<!-- Refer PJ4 Datasheet (MV-S105190-01) Table 90 Ignored: 0x0 0x90 0x91 0x92 -->
	<EventSet name="Branch">
		<Event id="0xc" name="Software change of PC" type="occurrence">
			<Description>This counter only increments for instructions that are unconditional or that pass their condition codes.</Description>
		</Event>
		<Event id="0xd" name="Branch executed" type="occurrence">
			<Description>This includes B{L}, BLX, CB{N}Z, HB{L}, and HBLP. This counter counts for all immediate branch instructions that are architecturally executed, including conditional instructions that fail their condition codes.</Description>
		</Event>
		<Event id="0xe" name="Procedure return executed" type="occurrence">
			<Description>This includes:&#13;&#10;BX R14&#13;&#10;MOV PC, LR&#13;&#10;POP {..., PC}&#13;&#10;LDR PC, [R13], #offset&#13;&#10;LDMIA R9!, {...,PC}LDR PC, [R9], #offset&#13;&#10;This counter only increments for instructions that are unconditional or that pass their condition codes.</Description>
		</Event>
		<Event id="0x10" name="Branch mispredicted or not predicted" type="occurrence">
			<Description>This counts for every pipeline flush because of a misprediction from the program flow prediction resources.</Description>
		</Event>
		<Event id="0x12" name="Predictable branches" type="occurrence">
			<Description>Branches or other change in the program flow that could have been predicted by the branch prediction resources of the processor</Description>
		</Event>
		<Event id="0x63" name="Branch retired" type="occurrence">
			<Description>Counts the number of times one branch retires. Counts events.</Description>
		</Event>
		<Event id="0x72" name="Branch mispredicted" type="occurrence">
			<Description>Counts the number of mispredicted branches. Counts events</Description>
		</Event>
		<Event id="0x81" name="Branches taken" type="occurrence">
			<Description>Counts the number of taken branches. Counts events.</Description>
		</Event>
	</EventSet>
	<EventSet name="Cache">
		<Event id="0x1" name="L1 I-Cache miss"
			type="occurrence">
			<Description>Each instruction fetch from normal cacheable memory that causes a refill from outside of the cache is counted. Accesses that do not cause a new cache refill but are satisfied from refilling data of a previous miss are not counted. Where instruction fetches consist of multiple instructions, these accesses count as single events. CP15 cache maintenance operations do not count as events. This counter increments for speculative instruction fetches and for fetches of instructions that reach execution</Description>
		</Event>
		<Event id="0x3" name="L1 D-Cache miss"
			type="occurrence">
			<Description>Each data read from or write to normal cacheable memory that causes a refill from outside of the cache is counted. Accesses that do not cause a new cache refill, but are satisfied from refilling data of a previous miss are not counted. Each access to a cache line to normal cacheable memory that causes a new linefill is counted, including the multiple transaction of instructions such as LDM or STM, PUSH and POP. Write-through writes that hit in the cache do not cause a linefill and so are not counted. CP15 cache maintenance operations do not count as events. This counter increments for speculative data accesses and for data accesses that are explicitly made by instructions.</Description>
		</Event>
		<Event id="0x4" name="L1 D-Cache access"
			type="occurrence">
			<Description>Each access to a cache line to normal cacheable memory is counted including the multiple transaction of instructions such as LDM or STM. CP15 cache maintenance operations do not count as events. This counter increments for speculative data accesses and for data accesses that are explicitly made by instructions</Description>
		</Event>
		<Event id="0x40" name="L1 D-Cache read hit" type="occurrence">
			<Description>Counts the number of Data Cache read hits. Counts events.</Description>
		</Event>
		<Event id="0x41" name="L1 D-Cache read miss" type="occurrence">
			<Description>Counts the number of Data Cache read misses. This includes data cache accesses that are non-cacheable. Counts events.</Description>
		</Event>
		<Event id="0x42" name="L1 D-Cache write hit" type="occurrence">
			<Description>Counts the number of Data Cache write hits. Counts events</Description>
		</Event>
		<Event id="0x43" name="L1 D-Cache write miss" type="occurrence">
			<Description>Counts the number Data Cache write misses. This includes data cache accesses that are non-cacheable and/or non-bufferable. Counts events</Description>
		</Event>
		<Event id="0x45" name="L1 I-Cache bus request" type="duration">
			<Description>Counts the number of cycles the Instruction Cache requests the bus until the data returns. Counts cycles</Description>
		</Event>
		<Event id="0x4f" name="L2-Cache write hit" type="occurrence">
			<Description>Counts the number of write accesses to addresses already in the L2C. Counts events</Description>
		</Event>
		<Event id="0x50" name="L2-Cache write miss" type="occurrence">
			<Description>Counts the number of write accesses to addresses not in the L2 Cache. Counts events</Description>
		</Event>
		<Event id="0x51" name="L2-Cache read count" type="occurrence">
			<Description>Counts the number of 64-bit read transactions (read ready) sent from the bus. Counts events</Description>
		</Event>
		<Event id="0x60" name="L1 I-Cache read miss" type="occurrence">
			<Description>Counts the number of Instruction Cache read misses. Counts events</Description>
		</Event>
		<Event id="0x6a" name="L2-Cache latency" type="duration">
			<Description>Counts the total number of cycles that L2C line fill requests to the bus. Counts cycles.</Description>
		</Event>
		<Event id="0x70" name="L1 D-Cache access, including non-cacheable requests" type="occurrence">
			<Description>Counts the number of times the Data cache is accessed. Counts events</Description>
		</Event>
		<Event id="0x79" name="L2-Cache read hit" type="occurrence">
			<Description>Counts the number of L2 Cache cache-to-bus external read requests. Counts events</Description>
		</Event>
		<Event id="0x7a" name="L2-Cache read miss" type="occurrence">
			<Description>Counts the number of L2 Cache read accesses that resulted in an external read request. Counts events.</Description>
		</Event>
		<Event id="0x7b" name="L2-Cache eviction" type="occurrence">
			<Description>Counts the number of evictions (Castouts) of a line from the L2 cache. Counts events.</Description>
		</Event>
		<Event id="0x83" name="L1 D-Cache read beat" type="occurrence">
			<Description>Counts the number of times the bus returns data to the Data cache during read requests. Counts events</Description>
		</Event>
		<Event id="0x84" name="L1 D-Cache write beat" type="occurrence">
			<Description>Counts the number of times the bus returns ready to the Data cache during write requests. Counts events</Description>
		</Event>
		<Event id="0x8a" name="L1 I-Cache read beat" type="occurrence">
			<Description>Counts the number of times the bus returns RDY to the instruction cache, useful to determine the cache&apos; average read latency (also known as &quot;read miss&quot; or &quot;read count&quot;).</Description>
		</Event>
	</EventSet>
	<EventSet name="Memory">
		<Event id="0x2" name="I-TLB miss" type="occurrence">
			<Description>Each instruction fetch that causes a translation table walk or an access to another level of TLB caching is counted. CP15 TLB maintenance operations do not count as events. This counter increments for speculative instruction fetches and for fetches of instructions that reach execution.</Description>
		</Event>
		<Event id="0x5" name="D-TLB miss" type="occurrence">
			<Description>Each data read or write operation that causes a translation table walk or an access to another level of TLB caching is counted. CP15 TLB maintenance operations do not count as events. This counter increments for speculative data accesses and for data accesses that are explicitly made by instructions.</Description>
		</Event>
		<Event id="0x6" name="Data read executed" type="occurrence">
			<Description>This counter increments for every instruction that explicitly read data, including SWP. This counter only increments for instructions that are unconditional or that pass their condition codes.</Description>
		</Event>
		<Event id="0x7" name="Data write executed" type="occurrence">
			<Description>The counter increments for every instruction that explicitly wrote data, including SWP. This counter only increments for instructions that are unconditional or that pass their condition codes.</Description>
		</Event>
		<Event id="0x44" name="MMU bus request" type="duration">
			<Description>Counts the number of cycles of requests to the MMU bus. This request can come from multiple masters. Counts cycles</Description>
		</Event>
		<Event id="0x4c" name="Data write access" type="occurrence">
			<Description>Counts the number of any Data write access. Counts events</Description>
		</Event>
		<Event id="0x4d" name="Data read access" type="occurrence">
			<Description>Counts the number of any Data read access. Counts events</Description>
		</Event>
		<Event id="0x61" name="I-TLB main MMU miss" type="occurrence">
			<Description>Counts the number of instruction TLB misses. Counts events</Description>
		</Event>
		<Event id="0x65" name="MMU read beat" type="occurrence">
			<Description>Counts the number of times the bus returns RDY to the MMU. This is a useful when determining bus efficiency. A user can use the signal that the MMU is requesting the bus and how long it takes on average for the data to return (mmu_bus_req / mmu_read_count). Counts events</Description>
		</Event>
		<Event id="0x71" name="D-TLB main MMU miss" type="occurrence">
			<Description>Counts the number of data TLB misses. Counts events</Description>
		</Event>
		<Event id="0x78" name="BIU simultaneous access" type="duration">
			<Description>BIU Simultaneous Access</Description>
		</Event>
		<Event id="0x80" name="TLB miss" type="occurrence">
			<Description>Counts the number of instruction and data TLB misses. Counts events</Description>
		</Event>
		<Event id="0x87" name="BIU any access" type="duration">
			<Description>Counts the number of cycles the BIU is accessed by any unit</Description>
		</Event>
		<Event id="0x88" name="Main TLB miss caused by I-Cache" type="occurrence">
			<Description>Counts the number of Instruction fetch operations that causes a Main TLB walk</Description>
		</Event>
		<Event id="0x89" name="Main TLB miss caused by D-Cache" type="occurrence">
			<Description>Counts the number of Data read or write operations that causes a Main TLB walk</Description>
		</Event>
	</EventSet>
	<EventSet name="Misc.">
		<!-- Event 0, 0x90, 0x91, 0x92 are reserved for future -->
		<Event id="0x8" name="Instruction executed" type="occurrence">
			<Description>This counter counts for all instructions, including conditional instructions that fail their condition codes.</Description>
		</Event>
		<Event id="0x9" name="Exception taken" type="occurrence">
			<Description>This counts for each exception taken</Description>
		</Event>
		<Event id="0xa" name="Exception return" type="occurrence">
			<Description>This includes:&#13;&#10;RFE &lt;addressing_mode&gt; &lt;Rn&gt;{!}&#13;&#10;MOVS PC (and other similar data processing instructions)&#13;&#10;LDM &lt;addressing_mode&gt; Rn{!}, &lt;registers_and_pc&gt;&#13;&#10;This counter only increments for instructions that are unconditional or that pass their condition codes.</Description>
		</Event>
		<Event id="0xb" name="Writes context ID register" type="occurrence">
			<Description>This counter only increments for instructions that are unconditional or that pass their condition codes.</Description>
		</Event>
		<Event id="0xf" name="Unaligned access" type="occurrence">
			<Description>This counts each instruction that is an access to an unaligned address. This counter only increments for instructions that are unconditional or that pass their condition codes</Description>
		</Event>
		<Event id="0x11" name="Cycle count" type="occurrence">
			<Description>Counts for every clock cycle</Description>
		</Event>
	</EventSet>
	<EventSet name="Pipeline">
		<Event id="0x46" name="Write buffer write latency" type="duration">
			<Description>Counts the number of cycles the Write Buffer requests the bus. Counts cycles</Description>
		</Event>
		<Event id="0x47" name="Hold LDM/STM" type="duration">
			<Description>Counts the number of cycles the pipeline is held because of a load/store multiple instruction. Counts cycles</Description>
		</Event>
		<Event id="0x48" name="No dual cflag" type="duration">
			<Description>Counts the number of cycles the processor cannot dual issue because of a Carry flag dependency. Counts cycles</Description>
		</Event>
		<Event id="0x49" name="No dual register plus" type="duration">
			<Description>Counts the number of cycles the processor cannot dual issue because the register file does not have enough read ports and at least one other reason. Counts cycles</Description>
		</Event>
		<Event id="0x4a" name="Load/store ROB0 on hold" type="duration">
			<Description>Counts the number of cycles a load or store instruction waits to retire from ROB0. Counts cycles</Description>
		</Event>
		<Event id="0x4b" name="Load/store ROB1 on hold" type="duration">
			<Description>Counts the number of cycles a load or store instruction waits to retire from ROB0=1. Counts cycles</Description>
		</Event>
		<Event id="0x4e" name="A2 stage stall" type="duration">
			<Description>Counts the number of cycles ALU A2 is stalled. Counts cycles</Description>
		</Event>
		<Event id="0x62" name="Single issue" type="duration">
			<Description>Counts the number of cycles the processor single issues. Counts cycles</Description>
		</Event>
		<Event id="0x64" name="ROB full" type="duration">
			<Description>Counts the number of cycles the Re-order Buffer (ROB) is full. Counts cycle.</Description>
		</Event>
		<Event id="0x66" name="Write buffer write beat" type="occurrence">
			<Description>Counts the number of times the bus returns ready to the Write Buffer. Counts events. This is useful to determine the average write latency of the write buffer (WB write latency/WB write count).</Description>
		</Event>
		<Event id="0x67" name="Dual issue" type="duration">
			<Description>Counts the number of cycles the processor dual issues. Counts cycles</Description>
		</Event>
		<Event id="0x68" name="No dual raw" type="duration">
			<Description>Counts the number of cycles the processor cannot dual issue because of a Read after Write hazard. Counts cycles.</Description>
		</Event>
		<Event id="0x69" name="Hold issue stage" type="duration">
			<Description>Counts the number of cycles the issue is held. Counts cycles</Description>
		</Event>
		<Event id="0x74" name="A1 stage stall" type="duration">
			<Description>Counts the number of cycles ALU A1 is stalled. Counts cycles</Description>
		</Event>
		<Event id="0x77" name="No dual register file" type="duration">
			<Description>Counts the number of cycles the processor cannot dual issue because the register file doesn&apos;t have enough read ports. Counts cycles</Description>
		</Event>
		<Event id="0x82" name="Write buffer full" type="duration">
			<Description>Counts the number of cycles WB is full. Counts cycles</Description>
		</Event>
		<Event id="0x85" name="No dual hardward" type="duration">
			<Description>Counts the number of cycles the processor cannot dual issue because of hardware conflict. Counts cycles</Description>
		</Event>
		<Event id="0x86" name="No dual multiple" type="duration">
			<Description>Counts the number of cycles the processor cannot dual issue because of multiple reasons. Counts cycles</Description>
		</Event>
	</EventSet>
	<EventSet name="WMMX">
		<Event id="0xc0" name="WMMX2 store FIFO full" type="duration">
			<Description>Counts the number of cycles when the WMMX2 store FIFO is full.</Description>
		</Event>
		<Event id="0xc1" name="WMMX2 finish FIFO full" type="duration">
			<Description>Counts the number of cycles when the WMMX2 finish FIFO is full.</Description>
		</Event>
		<Event id="0xc2" name="WMMX2 instruction FIFO full" type="duration">
			<Description>Counts the number of cycles when the WMMX2 instruction FIFO is full</Description>
		</Event>
		<Event id="0xc3" name="WMMX2 instruction retired" type="occurrence">
			<Description>Counts the number of retired WMMX2 instructions</Description>
		</Event>
		<Event id="0xc4" name="WMMX2 busy" type="duration">
			<Description>Counts the number of cycles when the WMMX2 is busy</Description>
		</Event>
		<Event id="0xc5" name="WMMX2 hold issue stage" type="duration">
			<Description>Counts the number of cycles when WMMX2 holds the issue stage</Description>
		</Event>
		<Event id="0xc6" name="WMMX2 hold write back stage" type="duration">
			<Description>Counts the number cycles when WMMX2 holds the writeback stage</Description>
		</Event>
	</EventSet>
</exp:Configuration>
